import React, { useState, useMemo } from 'react';
import { CSSClasses } from '../types.js';
import { defaultTexts } from '../const.js';
import { BotUICancelButton } from './Buttons.js';
import { useBotUI, useBotUIAction } from '../hooks/index.js';
// TODO: Fix the action.data.isMultiSelect render
export const BotuiActionSelect = () => {
    const bot = useBotUI();
    const action = useBotUIAction();
    const meta = action?.meta;
    const defaultSelection = Math.max(action?.data.options.findIndex((option) => option.selected), 0); // unfound index is returned as -1
    const [selected, setSelected] = useState(defaultSelection);
    const selectedObject = useMemo(() => action?.data.options[selected], [selected]);
    return (React.createElement(React.Fragment, null,
        React.createElement("select", { autoFocus: true, value: selected, multiple: action.data.isMultiSelect, onChange: (e) => {
                setSelected(parseInt(e.target.value));
            } }, action?.data.options.map((opt, i) => (React.createElement("option", { key: opt.value, value: i }, opt.label || opt.value)))),
        React.createElement("button", { className: CSSClasses.botui_button, onClick: () => bot.next({
                selected: selectedObject,
                text: selectedObject.label || selectedObject.value, // to be added as an answer from human
            }) }, meta?.confirmButtonText ?? defaultTexts.buttons.confirm),
        meta?.cancelable ? (React.createElement(BotUICancelButton, { ...meta, onClick: (cancelValue) => {
                bot.next({
                    selected: null,
                    ...cancelValue
                });
            } })) : null));
};
export const BotuiActionSelectButtons = () => {
    const bot = useBotUI();
    const action = useBotUIAction();
    const meta = action?.meta;
    return (React.createElement(React.Fragment, null,
        action?.data.options.map((option, i) => (React.createElement("button", { key: i, autoFocus: i === 0, className: CSSClasses.botui_button, onClick: () => setTimeout(() => bot.next({
                selected: option,
                text: option.label || option.value, // to be added as an answer from human
            }), 70) }, option.label))),
        meta?.cancelable ? (React.createElement(BotUICancelButton, { ...meta, onClick: (cancelValue) => {
                bot.next({
                    selected: null,
                    ...cancelValue
                });
            } })) : null));
};
//# sourceMappingURL=BotUIActionSelect.js.map