import React from 'react';
import { TransitionGroup } from 'react-transition-group';
import { CSSClasses } from '../types.js';
import { useBotUIMessage } from '../hooks/index.js';
import { BotUIMessageLinks } from './BotUIMessageLinks.js';
import { BringIntoView, SlideFade, WithRefContext } from './Utils.js';
export var MessageType;
(function (MessageType) {
    MessageType["text"] = "text";
    MessageType["embed"] = "embed";
    MessageType["image"] = "image";
    MessageType["links"] = "links";
})(MessageType || (MessageType = {}));
const messageRenderers = {
    text: BotUIMessageText,
    image: BotUIMessageImage,
    embed: BotUIMessageEmbed,
    links: BotUIMessageLinks,
};
export function BotUIMessageText({ message }) {
    return !message?.data?.text ? null : React.createElement(React.Fragment, null, message?.data?.text);
}
export function BotUIMessageImage({ message }) {
    return React.createElement("img", { ...message.data, src: message?.data?.src });
}
export function BotUIMessageEmbed({ message }) {
    return React.createElement("iframe", { ...message.data, src: message?.data?.src });
}
export const BotUIMessage = ({ message, renderers, bringIntoView = true, }) => {
    const messageType = message?.meta?.messageType ?? 'text';
    const MessageRenderer = renderers[messageType];
    const classes = [
        CSSClasses.botui_message_content,
        'message_' + messageType,
    ];
    const fromHuman = message?.meta?.fromHuman || message?.meta?.previous?.type == 'action';
    if (fromHuman) {
        classes.push('human');
    }
    return (React.createElement("div", { className: CSSClasses.botui_message },
        React.createElement(WithRefContext, { className: classes.join(' ') },
            React.createElement(BringIntoView, { bringIntoView: bringIntoView },
                React.createElement(SlideFade, null,
                    React.createElement(React.Fragment, null, MessageRenderer ? (React.createElement(MessageRenderer, { message: message })) : (message.meta.messageType)))))));
};
export const BotUIMessageList = ({ renderer = {}, bringIntoView = true, }) => {
    const messages = useBotUIMessage();
    const renderers = {
        ...messageRenderers,
        ...renderer, // use it after defaults to allow override of existing renderers
    };
    return (React.createElement("div", { className: CSSClasses.botui_message_list },
        React.createElement(TransitionGroup, null, messages.map((message, i) => (React.createElement(BotUIMessage, { key: i, message: message, renderers: renderers, bringIntoView: bringIntoView }))))));
};
//# sourceMappingURL=BotUIMessage.js.map