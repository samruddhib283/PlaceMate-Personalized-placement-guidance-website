import { CSSTransition } from 'react-transition-group';
import scrollIntoView from 'scroll-into-view-if-needed';
import React, { createContext, useContext, useEffect, useState } from 'react';
export const RefContext = createContext(null);
export function SlideFade({ children, timeout = 50, visible = true, }) {
    const ref = useContext(RefContext);
    return (React.createElement(CSSTransition, { nodeRef: { current: ref }, timeout: timeout, classNames: "slide-fade", in: ref !== null && visible }, children));
}
export function BringIntoView({ children, bringIntoView = true, }) {
    const ref = useContext(RefContext);
    useEffect(() => {
        if (ref && bringIntoView) {
            scrollIntoView(ref, {
                behavior: 'smooth',
                scrollMode: 'if-needed',
            });
        }
    }, []);
    return children;
}
export function WithRefContext({ children, className, as = 'div', }) {
    const [ref, setRef] = useState(null);
    return React.createElement(as, {
        className: className,
        ref: (_ref) => setRef(_ref),
        children: (React.createElement(RefContext.Provider, { value: ref }, ref ? children : null)),
    });
}
//# sourceMappingURL=Utils.js.map